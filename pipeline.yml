trigger:
  branches:
    include:
      - main
      - develop

stages:
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - checkout: self
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
    - script: |
        npm install
        npm run build
      displayName: 'Build Application'
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'

- stage: SecurityScan
  dependsOn: Build
  jobs:
  - job: SASTandDependencyScan
    steps:
    - checkout: self
    # Snyk Scan
    - task: SnykSecurityScan@1
      inputs:
        serviceConnectionEndpoint: 'snyk-connection'  # Create this service connection
        testType: 'app'
        monitorOnBuild: true
    # WhiteSource (Mend) Scan
    - task: WhitesourceBolt@20
      inputs:
        cwd: '$(Build.SourcesDirectory)'
        configFile: 'whitesource.config'

- stage: ContainerBuildAndScan
  dependsOn: SecurityScan
  jobs:
  - job: BuildAndScanContainer
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'your-acr-service-connection'  # Replace with your actual ACR service connection name
        repository: 'sample-nodejs-app'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
    # Trivy Scan using Bash script
    - script: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -
        ./trivy image your-acr.azurecr.io/sample-nodejs-app:$(Build.BuildId)
      displayName: 'Trivy Container Scan'

- stage: DeployToDev
  dependsOn: ContainerBuildAndScan
  jobs:
  - deployment: DevDeploy
    environment: 'dev'  # Azure DevOps environment must be created first
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            inputs:
              action: deploy
              manifests: '**/manifests/dev/*.yaml'
              kubernetesServiceConnection: 'aks-dev-connection'
              namespace: 'dev'

- stage: ApproveAndDeployProd
  dependsOn: DeployToDev
  jobs:
  - deployment: ProdDeploy
    environment: 'production'  # Azure DevOps environment must be created first
    strategy:
      runOnce:
        deploy:
          steps:
          - task: ManualValidation@0
            inputs:
              instructions: 'Please validate deployment to production.'
              notifyUsers: ''
              onTimeout: 'reject'
              timeout: '43200'  # 12 hours timeout for approval
          - task: KubernetesManifest@0
            inputs:
              action: deploy
              manifests: '**/manifests/prod/*.yaml'
              kubernetesServiceConnection: 'aks-prod-connection'
              namespace: 'prod'
