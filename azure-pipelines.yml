# azure-pipelines.yml
trigger:
  branches:
    include:
      - main

variables:
  imageRepository: 'youracr.azurecr.io/aks-store'
  dockerRegistryServiceConnection: 'AzureACRServiceConnection'
  kubernetesServiceConnection: 'AzureK8sServiceConnection'
  containerRegistry: 'youracr.azurecr.io'
  tag: '$(Build.BuildId)'
  aksNamespace: 'default'

stages:
  - stage: Build
    displayName: Build and Push Docker Images
    jobs:
      - job: Build
        displayName: Build Images
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2
            displayName: Build Frontend
            inputs:
              command: build
              repository: '$(imageRepository)/frontend'
              dockerfile: 'frontend/Dockerfile'
              tags: '$(tag)'

          - task: Docker@2
            displayName: Build Backend
            inputs:
              command: build
              repository: '$(imageRepository)/backend'
              dockerfile: 'backend/Dockerfile'
              tags: '$(tag)'

          - task: Docker@2
            displayName: Push Frontend
            inputs:
              command: push
              repository: '$(imageRepository)/frontend'
              tags: '$(tag)'
              containerRegistry: '$(dockerRegistryServiceConnection)'

          - task: Docker@2
            displayName: Push Backend
            inputs:
              command: push
              repository: '$(imageRepository)/backend'
              tags: '$(tag)'
              containerRegistry: '$(dockerRegistryServiceConnection)'

  - stage: Deploy
    displayName: Deploy to AKS
    dependsOn: Build
    jobs:
      - job: Deploy
        displayName: Deploy to AKS
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Kubernetes@1
            displayName: Set image for frontend
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(aksNamespace)'
              command: 'set'
              arguments: 'image deployment/frontend frontend=$(imageRepository)/frontend:$(tag)'

          - task: Kubernetes@1
            displayName: Set image for backend
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(aksNamespace)'
              command: 'set'
              arguments: 'image deployment/backend backend=$(imageRepository)/backend:$(tag)'

